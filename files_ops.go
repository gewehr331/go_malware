package main

import (
	"archive/zip"
	"fmt"
	"io"
	"os"
	"path/filepath"

	_ "modernc.org/sqlite"
)

func CopyDir(src string, dst string) error {
	var err error
	var fds []os.DirEntry
	var srcinfo os.FileInfo

	if srcinfo, err = os.Stat(src); err != nil {
		return err
	}

	if err = os.MkdirAll(dst, srcinfo.Mode()); err != nil {
		return err
	}

	if fds, err = os.ReadDir(src); err != nil {
		return err
	}
	for _, fd := range fds {
		srcfp := filepath.Join(src, fd.Name())
		dstfp := filepath.Join(dst, fd.Name())

		if fd.IsDir() {
			if err = CopyDir(srcfp, dstfp); err != nil {
				fmt.Println(err)
			}
		} else {
			if err = CopyFile(srcfp, dstfp); err != nil {
				fmt.Println(err)
			}
		}
	}
	return nil
}

// CopyFile copies a single file from src to dst
func CopyFile(src, dst string) error {
	var err error
	var srcfd *os.File
	var dstfd *os.File
	var srcinfo os.FileInfo

	if srcfd, err = os.Open(src); err != nil {
		return err
	}
	defer srcfd.Close()

	if dstfd, err = os.Create(dst); err != nil {
		return err
	}
	defer dstfd.Close()

	if _, err = io.Copy(dstfd, srcfd); err != nil {
		return err
	}
	if srcinfo, err = os.Stat(src); err != nil {
		return err
	}
	return os.Chmod(dst, srcinfo.Mode())
}

// Функция для создания zip-архива из папки
func ZipFolder(folderPath string, zipFilePath string) error {
	zipFile, err := os.Create(zipFilePath)
	if err != nil {
		return err
	}
	defer zipFile.Close()

	zipWriter := zip.NewWriter(zipFile)
	defer zipWriter.Close()

	// Функция для добавления файлов и папок в архив
	addFiles := func(filePath string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Создание заголовка для файла или папки
		header, err := zip.FileInfoHeader(info)
		if err != nil {
			return err
		}

		// Установка полного пути файла внутри архива, сохраняя структуру папок
		header.Name, err = filepath.Rel(filepath.Dir(folderPath), filePath)
		if err != nil {
			return err
		}

		// Если это директория, добавляем слэш в конце имени
		if info.IsDir() {
			header.Name += "/"
		} else {
			header.Method = zip.Deflate // Сжатие файла
		}

		writer, err := zipWriter.CreateHeader(header)
		if err != nil {
			return err
		}

		// Если это файл, копируем его содержимое в архив
		if !info.IsDir() {
			file, err := os.Open(filePath)
			if err != nil {
				return err
			}
			defer file.Close()
			_, err = io.Copy(writer, file)
		}
		return err
	}

	// Рекурсивный обход всех файлов и папок
	err = filepath.Walk(folderPath, addFiles)
	if err != nil {
		return err
	}

	return zipWriter.Close()
}
